/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CTMRWA001XInterface extends utils.Interface {
  functions: {
    "addNewChainIdAndToken(string,string[],string[],string)": FunctionFragment;
    "addNewChainIdAndTokenX(string,string[],string[],string,string)": FunctionFragment;
    "addTxSender(address)": FunctionFragment;
    "addXChainInfo(string,string,string[],string[])": FunctionFragment;
    "addXChainInfoX(string[],string[],string)": FunctionFragment;
    "adminX(string,string,string,string)": FunctionFragment;
    "c3CallerProxy()": FunctionFragment;
    "c3Fallback(uint256,bytes,bytes)": FunctionFragment;
    "chainIdStr()": FunctionFragment;
    "changeAdminCrossChain(string,string,string,address)": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "dappID()": FunctionFragment;
    "delay()": FunctionFragment;
    "deployCTMRWA001(string,uint256)": FunctionFragment;
    "disableTxSender(address)": FunctionFragment;
    "doGov(string,string,bytes)": FunctionFragment;
    "doGovBroadcast(string[],string[],bytes)": FunctionFragment;
    "feeManager()": FunctionFragment;
    "getChainContract(string)": FunctionFragment;
    "gov()": FunctionFragment;
    "isValidSender(address)": FunctionFragment;
    "mintNewToken(string,string,uint256,uint256,string,address)": FunctionFragment;
    "mintX(string,string,uint256,uint256,uint256,uint256,string,string)": FunctionFragment;
    "mintX(string,string,uint256,uint256,uint256,string,string)": FunctionFragment;
    "setDelay(uint256)": FunctionFragment;
    "strToUint(string)": FunctionFragment;
    "stringToAddress(string)": FunctionFragment;
    "stringsEqual(string,string)": FunctionFragment;
    "transferFromX(uint256,string,uint256,string,uint256,string,address)": FunctionFragment;
    "transferFromX(uint256,string,string,uint256,string,address)": FunctionFragment;
    "transferFromX(string,string,uint256,string,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNewChainIdAndToken"
      | "addNewChainIdAndTokenX"
      | "addTxSender"
      | "addXChainInfo"
      | "addXChainInfoX"
      | "adminX"
      | "c3CallerProxy"
      | "c3Fallback"
      | "chainIdStr"
      | "changeAdminCrossChain"
      | "changeGov"
      | "dappID"
      | "delay"
      | "deployCTMRWA001"
      | "disableTxSender"
      | "doGov"
      | "doGovBroadcast"
      | "feeManager"
      | "getChainContract"
      | "gov"
      | "isValidSender"
      | "mintNewToken"
      | "mintX(string,string,uint256,uint256,uint256,uint256,string,string)"
      | "mintX(string,string,uint256,uint256,uint256,string,string)"
      | "setDelay"
      | "strToUint"
      | "stringToAddress"
      | "stringsEqual"
      | "transferFromX(uint256,string,uint256,string,uint256,string,address)"
      | "transferFromX(uint256,string,string,uint256,string,address)"
      | "transferFromX(string,string,uint256,string,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNewChainIdAndToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewChainIdAndTokenX",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addTxSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addXChainInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addXChainInfoX",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adminX",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "c3CallerProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "c3Fallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdStr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdminCrossChain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "dappID", values?: undefined): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployCTMRWA001",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableTxSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "doGov",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "doGovBroadcast",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintX(string,string,uint256,uint256,uint256,uint256,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintX(string,string,uint256,uint256,uint256,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "strToUint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringsEqual",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromX(uint256,string,uint256,string,uint256,string,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromX(uint256,string,string,uint256,string,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromX(string,string,uint256,string,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewChainIdAndToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewChainIdAndTokenX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTxSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addXChainInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addXChainInfoX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adminX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "c3CallerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "c3Fallback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainIdStr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdminCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dappID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployCTMRWA001",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableTxSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doGovBroadcast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintX(string,string,uint256,uint256,uint256,uint256,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintX(string,string,uint256,uint256,uint256,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strToUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringsEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromX(uint256,string,uint256,string,uint256,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromX(uint256,string,string,uint256,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromX(string,string,uint256,string,address)",
    data: BytesLike
  ): Result;

  events: {
    "AddNewChainAndToken(string,string,string[],string[])": EventFragment;
    "ChangeAdminDest(string,string,string)": EventFragment;
    "LogChangeGov(address,address,uint256,uint256)": EventFragment;
    "LogFallback(bytes4,bytes,bytes)": EventFragment;
    "LogTxSender(address,bool)": EventFragment;
    "SetChainContract(string[],string[],string,string)": EventFragment;
    "TransferFromSourceX(string,string,uint256,uint256,uint256,uint256,string,string)": EventFragment;
    "TransferToDestX(string,string,uint256,uint256,uint256,uint256,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddNewChainAndToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeAdminDest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogChangeGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTxSender"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChainContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFromSourceX"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferToDestX"): EventFragment;
}

export interface AddNewChainAndTokenEventObject {
  fromChainIdStr: string;
  fromContractStr: string;
  chainIdsStr: string[];
  ctmRwa001AddrsStr: string[];
}
export type AddNewChainAndTokenEvent = TypedEvent<
  [string, string, string[], string[]],
  AddNewChainAndTokenEventObject
>;

export type AddNewChainAndTokenEventFilter =
  TypedEventFilter<AddNewChainAndTokenEvent>;

export interface ChangeAdminDestEventObject {
  currentAdminStr: string;
  newAdminStr: string;
  fromChainIdStr: string;
}
export type ChangeAdminDestEvent = TypedEvent<
  [string, string, string],
  ChangeAdminDestEventObject
>;

export type ChangeAdminDestEventFilter = TypedEventFilter<ChangeAdminDestEvent>;

export interface LogChangeGovEventObject {
  oldGov: string;
  newGov: string;
  effectiveTime: BigNumber;
  chainID: BigNumber;
}
export type LogChangeGovEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogChangeGovEventObject
>;

export type LogChangeGovEventFilter = TypedEventFilter<LogChangeGovEvent>;

export interface LogFallbackEventObject {
  selector: string;
  data: string;
  reason: string;
}
export type LogFallbackEvent = TypedEvent<
  [string, string, string],
  LogFallbackEventObject
>;

export type LogFallbackEventFilter = TypedEventFilter<LogFallbackEvent>;

export interface LogTxSenderEventObject {
  txSender: string;
  vaild: boolean;
}
export type LogTxSenderEvent = TypedEvent<
  [string, boolean],
  LogTxSenderEventObject
>;

export type LogTxSenderEventFilter = TypedEventFilter<LogTxSenderEvent>;

export interface SetChainContractEventObject {
  chainIdsStr: string[];
  contractAddrsStr: string[];
  fromContractStr: string;
  fromChainIdStr: string;
}
export type SetChainContractEvent = TypedEvent<
  [string[], string[], string, string],
  SetChainContractEventObject
>;

export type SetChainContractEventFilter =
  TypedEventFilter<SetChainContractEvent>;

export interface TransferFromSourceXEventObject {
  fromAddressStr: string;
  toAddressStr: string;
  fromtokenId: BigNumber;
  toTokenId: BigNumber;
  slot: BigNumber;
  value: BigNumber;
  fromCtmRwa001AddrStr: string;
  toCtmRwa001AddrStr: string;
}
export type TransferFromSourceXEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  TransferFromSourceXEventObject
>;

export type TransferFromSourceXEventFilter =
  TypedEventFilter<TransferFromSourceXEvent>;

export interface TransferToDestXEventObject {
  fromAddressStr: string;
  toAddressStr: string;
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  slot: BigNumber;
  value: BigNumber;
  fromContractStr: string;
  ctmRwa001AddrStr: string;
}
export type TransferToDestXEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  TransferToDestXEventObject
>;

export type TransferToDestXEventFilter = TypedEventFilter<TransferToDestXEvent>;

export interface CTMRWA001X extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CTMRWA001XInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewChainIdAndToken(
      toChainIdStr_: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNewChainIdAndTokenX(
      _adminStr: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addXChainInfo(
      _tochainIdStr: PromiseOrValue<string>,
      _toContractStr: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _contractAddrsStr: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addXChainInfoX(
      _chainIdsStr: PromiseOrValue<string>[],
      _contractAddrsStr: PromiseOrValue<string>[],
      _fromContractStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminX(
      _currentAdminStr: PromiseOrValue<string>,
      _newAdminStr: PromiseOrValue<string>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    c3CallerProxy(overrides?: CallOverrides): Promise<[string]>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chainIdStr(overrides?: CallOverrides): Promise<[string]>;

    changeAdminCrossChain(
      _newAdminStr: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dappID(overrides?: CallOverrides): Promise<[BigNumber]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployCTMRWA001(
      _adminStr: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    getChainContract(
      _chainIdStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintNewToken(
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      slot_: PromiseOrValue<BigNumberish>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintX(string,string,uint256,uint256,uint256,uint256,string,string)"(
      fromAddressStr_: PromiseOrValue<string>,
      toAddressStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toTokenId_: PromiseOrValue<BigNumberish>,
      slot_: PromiseOrValue<BigNumberish>,
      value_: PromiseOrValue<BigNumberish>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintX(string,string,uint256,uint256,uint256,string,string)"(
      fromAddressStr_: PromiseOrValue<string>,
      toAddressStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      slot_: PromiseOrValue<BigNumberish>,
      balance_: PromiseOrValue<BigNumberish>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strToUint(
      _str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { res: BigNumber; err: boolean }>;

    stringToAddress(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringsEqual(
      a: PromiseOrValue<string>,
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "transferFromX(uint256,string,uint256,string,uint256,string,address)"(
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toAddressStr_: PromiseOrValue<string>,
      toTokenId_: PromiseOrValue<BigNumberish>,
      toChainIdStr_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFromX(uint256,string,string,uint256,string,address)"(
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFromX(string,string,uint256,string,address)"(
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addNewChainIdAndToken(
    toChainIdStr_: PromiseOrValue<string>,
    _chainIdsStr: PromiseOrValue<string>[],
    _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNewChainIdAndTokenX(
    _adminStr: PromiseOrValue<string>,
    _chainIdsStr: PromiseOrValue<string>[],
    _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
    _fromContractStr: PromiseOrValue<string>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTxSender(
    txSender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addXChainInfo(
    _tochainIdStr: PromiseOrValue<string>,
    _toContractStr: PromiseOrValue<string>,
    _chainIdsStr: PromiseOrValue<string>[],
    _contractAddrsStr: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addXChainInfoX(
    _chainIdsStr: PromiseOrValue<string>[],
    _contractAddrsStr: PromiseOrValue<string>[],
    _fromContractStr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminX(
    _currentAdminStr: PromiseOrValue<string>,
    _newAdminStr: PromiseOrValue<string>,
    _fromContractStr: PromiseOrValue<string>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  c3CallerProxy(overrides?: CallOverrides): Promise<string>;

  c3Fallback(
    _dappID: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _reason: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chainIdStr(overrides?: CallOverrides): Promise<string>;

  changeAdminCrossChain(
    _newAdminStr: PromiseOrValue<string>,
    toChainIdStr_: PromiseOrValue<string>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    feeToken: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGov(
    newGov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dappID(overrides?: CallOverrides): Promise<BigNumber>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  deployCTMRWA001(
    _adminStr: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableTxSender(
    txSender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doGov(
    _to: PromiseOrValue<string>,
    _toChainID: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doGovBroadcast(
    _targets: PromiseOrValue<string>[],
    _toChainIDs: PromiseOrValue<string>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  getChainContract(
    _chainIdStr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  isValidSender(
    txSender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintNewToken(
    toAddressStr_: PromiseOrValue<string>,
    toChainIdStr_: PromiseOrValue<string>,
    slot_: PromiseOrValue<BigNumberish>,
    value_: PromiseOrValue<BigNumberish>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    feeToken: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintX(string,string,uint256,uint256,uint256,uint256,string,string)"(
    fromAddressStr_: PromiseOrValue<string>,
    toAddressStr_: PromiseOrValue<string>,
    fromTokenId_: PromiseOrValue<BigNumberish>,
    toTokenId_: PromiseOrValue<BigNumberish>,
    slot_: PromiseOrValue<BigNumberish>,
    value_: PromiseOrValue<BigNumberish>,
    _fromContractStr: PromiseOrValue<string>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintX(string,string,uint256,uint256,uint256,string,string)"(
    fromAddressStr_: PromiseOrValue<string>,
    toAddressStr_: PromiseOrValue<string>,
    fromTokenId_: PromiseOrValue<BigNumberish>,
    slot_: PromiseOrValue<BigNumberish>,
    balance_: PromiseOrValue<BigNumberish>,
    _fromContractStr: PromiseOrValue<string>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelay(
    _delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strToUint(
    _str: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { res: BigNumber; err: boolean }>;

  stringToAddress(
    str: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringsEqual(
    a: PromiseOrValue<string>,
    b: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "transferFromX(uint256,string,uint256,string,uint256,string,address)"(
    fromTokenId_: PromiseOrValue<BigNumberish>,
    toAddressStr_: PromiseOrValue<string>,
    toTokenId_: PromiseOrValue<BigNumberish>,
    toChainIdStr_: PromiseOrValue<string>,
    value_: PromiseOrValue<BigNumberish>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    feeToken: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFromX(uint256,string,string,uint256,string,address)"(
    fromTokenId_: PromiseOrValue<BigNumberish>,
    toAddressStr_: PromiseOrValue<string>,
    toChainIdStr_: PromiseOrValue<string>,
    value_: PromiseOrValue<BigNumberish>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    feeToken: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFromX(string,string,uint256,string,address)"(
    toAddressStr_: PromiseOrValue<string>,
    toChainIdStr_: PromiseOrValue<string>,
    fromTokenId_: PromiseOrValue<BigNumberish>,
    _ctmRwa001AddrStr: PromiseOrValue<string>,
    feeToken: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNewChainIdAndToken(
      toChainIdStr_: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNewChainIdAndTokenX(
      _adminStr: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addXChainInfo(
      _tochainIdStr: PromiseOrValue<string>,
      _toContractStr: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _contractAddrsStr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addXChainInfoX(
      _chainIdsStr: PromiseOrValue<string>[],
      _contractAddrsStr: PromiseOrValue<string>[],
      _fromContractStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    adminX(
      _currentAdminStr: PromiseOrValue<string>,
      _newAdminStr: PromiseOrValue<string>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    c3CallerProxy(overrides?: CallOverrides): Promise<string>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    chainIdStr(overrides?: CallOverrides): Promise<string>;

    changeAdminCrossChain(
      _newAdminStr: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dappID(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    deployCTMRWA001(
      _adminStr: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    getChainContract(
      _chainIdStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintNewToken(
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      slot_: PromiseOrValue<BigNumberish>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintX(string,string,uint256,uint256,uint256,uint256,string,string)"(
      fromAddressStr_: PromiseOrValue<string>,
      toAddressStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toTokenId_: PromiseOrValue<BigNumberish>,
      slot_: PromiseOrValue<BigNumberish>,
      value_: PromiseOrValue<BigNumberish>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mintX(string,string,uint256,uint256,uint256,string,string)"(
      fromAddressStr_: PromiseOrValue<string>,
      toAddressStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      slot_: PromiseOrValue<BigNumberish>,
      balance_: PromiseOrValue<BigNumberish>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    strToUint(
      _str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { res: BigNumber; err: boolean }>;

    stringToAddress(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringsEqual(
      a: PromiseOrValue<string>,
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFromX(uint256,string,uint256,string,uint256,string,address)"(
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toAddressStr_: PromiseOrValue<string>,
      toTokenId_: PromiseOrValue<BigNumberish>,
      toChainIdStr_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFromX(uint256,string,string,uint256,string,address)"(
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFromX(string,string,uint256,string,address)"(
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddNewChainAndToken(string,string,string[],string[])"(
      fromChainIdStr?: null,
      fromContractStr?: null,
      chainIdsStr?: null,
      ctmRwa001AddrsStr?: null
    ): AddNewChainAndTokenEventFilter;
    AddNewChainAndToken(
      fromChainIdStr?: null,
      fromContractStr?: null,
      chainIdsStr?: null,
      ctmRwa001AddrsStr?: null
    ): AddNewChainAndTokenEventFilter;

    "ChangeAdminDest(string,string,string)"(
      currentAdminStr?: null,
      newAdminStr?: null,
      fromChainIdStr?: null
    ): ChangeAdminDestEventFilter;
    ChangeAdminDest(
      currentAdminStr?: null,
      newAdminStr?: null,
      fromChainIdStr?: null
    ): ChangeAdminDestEventFilter;

    "LogChangeGov(address,address,uint256,uint256)"(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      effectiveTime?: PromiseOrValue<BigNumberish> | null,
      chainID?: null
    ): LogChangeGovEventFilter;
    LogChangeGov(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      effectiveTime?: PromiseOrValue<BigNumberish> | null,
      chainID?: null
    ): LogChangeGovEventFilter;

    "LogFallback(bytes4,bytes,bytes)"(
      selector?: null,
      data?: null,
      reason?: null
    ): LogFallbackEventFilter;
    LogFallback(
      selector?: null,
      data?: null,
      reason?: null
    ): LogFallbackEventFilter;

    "LogTxSender(address,bool)"(
      txSender?: PromiseOrValue<string> | null,
      vaild?: null
    ): LogTxSenderEventFilter;
    LogTxSender(
      txSender?: PromiseOrValue<string> | null,
      vaild?: null
    ): LogTxSenderEventFilter;

    "SetChainContract(string[],string[],string,string)"(
      chainIdsStr?: null,
      contractAddrsStr?: null,
      fromContractStr?: null,
      fromChainIdStr?: null
    ): SetChainContractEventFilter;
    SetChainContract(
      chainIdsStr?: null,
      contractAddrsStr?: null,
      fromContractStr?: null,
      fromChainIdStr?: null
    ): SetChainContractEventFilter;

    "TransferFromSourceX(string,string,uint256,uint256,uint256,uint256,string,string)"(
      fromAddressStr?: null,
      toAddressStr?: null,
      fromtokenId?: null,
      toTokenId?: null,
      slot?: null,
      value?: null,
      fromCtmRwa001AddrStr?: null,
      toCtmRwa001AddrStr?: null
    ): TransferFromSourceXEventFilter;
    TransferFromSourceX(
      fromAddressStr?: null,
      toAddressStr?: null,
      fromtokenId?: null,
      toTokenId?: null,
      slot?: null,
      value?: null,
      fromCtmRwa001AddrStr?: null,
      toCtmRwa001AddrStr?: null
    ): TransferFromSourceXEventFilter;

    "TransferToDestX(string,string,uint256,uint256,uint256,uint256,string,string)"(
      fromAddressStr?: null,
      toAddressStr?: null,
      fromTokenId?: null,
      toTokenId?: null,
      slot?: null,
      value?: null,
      fromContractStr?: null,
      ctmRwa001AddrStr?: null
    ): TransferToDestXEventFilter;
    TransferToDestX(
      fromAddressStr?: null,
      toAddressStr?: null,
      fromTokenId?: null,
      toTokenId?: null,
      slot?: null,
      value?: null,
      fromContractStr?: null,
      ctmRwa001AddrStr?: null
    ): TransferToDestXEventFilter;
  };

  estimateGas: {
    addNewChainIdAndToken(
      toChainIdStr_: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNewChainIdAndTokenX(
      _adminStr: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addXChainInfo(
      _tochainIdStr: PromiseOrValue<string>,
      _toContractStr: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _contractAddrsStr: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addXChainInfoX(
      _chainIdsStr: PromiseOrValue<string>[],
      _contractAddrsStr: PromiseOrValue<string>[],
      _fromContractStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminX(
      _currentAdminStr: PromiseOrValue<string>,
      _newAdminStr: PromiseOrValue<string>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    c3CallerProxy(overrides?: CallOverrides): Promise<BigNumber>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chainIdStr(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdminCrossChain(
      _newAdminStr: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dappID(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    deployCTMRWA001(
      _adminStr: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    getChainContract(
      _chainIdStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNewToken(
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      slot_: PromiseOrValue<BigNumberish>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintX(string,string,uint256,uint256,uint256,uint256,string,string)"(
      fromAddressStr_: PromiseOrValue<string>,
      toAddressStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toTokenId_: PromiseOrValue<BigNumberish>,
      slot_: PromiseOrValue<BigNumberish>,
      value_: PromiseOrValue<BigNumberish>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintX(string,string,uint256,uint256,uint256,string,string)"(
      fromAddressStr_: PromiseOrValue<string>,
      toAddressStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      slot_: PromiseOrValue<BigNumberish>,
      balance_: PromiseOrValue<BigNumberish>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strToUint(
      _str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringToAddress(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringsEqual(
      a: PromiseOrValue<string>,
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferFromX(uint256,string,uint256,string,uint256,string,address)"(
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toAddressStr_: PromiseOrValue<string>,
      toTokenId_: PromiseOrValue<BigNumberish>,
      toChainIdStr_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFromX(uint256,string,string,uint256,string,address)"(
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFromX(string,string,uint256,string,address)"(
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewChainIdAndToken(
      toChainIdStr_: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNewChainIdAndTokenX(
      _adminStr: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _otherCtmRwa001AddrsStr: PromiseOrValue<string>[],
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addXChainInfo(
      _tochainIdStr: PromiseOrValue<string>,
      _toContractStr: PromiseOrValue<string>,
      _chainIdsStr: PromiseOrValue<string>[],
      _contractAddrsStr: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addXChainInfoX(
      _chainIdsStr: PromiseOrValue<string>[],
      _contractAddrsStr: PromiseOrValue<string>[],
      _fromContractStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminX(
      _currentAdminStr: PromiseOrValue<string>,
      _newAdminStr: PromiseOrValue<string>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    c3CallerProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chainIdStr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdminCrossChain(
      _newAdminStr: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dappID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployCTMRWA001(
      _adminStr: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainContract(
      _chainIdStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintNewToken(
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      slot_: PromiseOrValue<BigNumberish>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintX(string,string,uint256,uint256,uint256,uint256,string,string)"(
      fromAddressStr_: PromiseOrValue<string>,
      toAddressStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toTokenId_: PromiseOrValue<BigNumberish>,
      slot_: PromiseOrValue<BigNumberish>,
      value_: PromiseOrValue<BigNumberish>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintX(string,string,uint256,uint256,uint256,string,string)"(
      fromAddressStr_: PromiseOrValue<string>,
      toAddressStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      slot_: PromiseOrValue<BigNumberish>,
      balance_: PromiseOrValue<BigNumberish>,
      _fromContractStr: PromiseOrValue<string>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strToUint(
      _str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringToAddress(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringsEqual(
      a: PromiseOrValue<string>,
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferFromX(uint256,string,uint256,string,uint256,string,address)"(
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toAddressStr_: PromiseOrValue<string>,
      toTokenId_: PromiseOrValue<BigNumberish>,
      toChainIdStr_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromX(uint256,string,string,uint256,string,address)"(
      fromTokenId_: PromiseOrValue<BigNumberish>,
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromX(string,string,uint256,string,address)"(
      toAddressStr_: PromiseOrValue<string>,
      toChainIdStr_: PromiseOrValue<string>,
      fromTokenId_: PromiseOrValue<BigNumberish>,
      _ctmRwa001AddrStr: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
