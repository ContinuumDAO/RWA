/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface C3DappManagerInterface extends utils.Interface {
  functions: {
    "addDappAddr(uint256,string[])": FunctionFragment;
    "addOperator(address)": FunctionFragment;
    "addTxSender(uint256,string[],string[])": FunctionFragment;
    "applyGov()": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "charging(uint256[],address[],uint256[])": FunctionFragment;
    "dappID()": FunctionFragment;
    "dappStakePool(uint256,address)": FunctionFragment;
    "delWhitelists(uint256,string[])": FunctionFragment;
    "deposit(uint256,address,uint256)": FunctionFragment;
    "disableFeeCurrency(address)": FunctionFragment;
    "feeCurrencies(address)": FunctionFragment;
    "getAllOperators()": FunctionFragment;
    "getTxSenders(uint256)": FunctionFragment;
    "gov()": FunctionFragment;
    "initDappConfig(address,string,string,string[])": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "operators(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingGov()": FunctionFragment;
    "removeTxSender(uint256,string[])": FunctionFragment;
    "resetAdmin(uint256,address)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "setBlacklists(uint256,bool)": FunctionFragment;
    "setFeeCurrencies(address[],uint256[])": FunctionFragment;
    "setSpeFeeConfigByChain(address,string,uint256)": FunctionFragment;
    "speChainFees(string,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateDAppConfig(uint256,address,string,string)": FunctionFragment;
    "updateDappByGov(uint256,address,uint256)": FunctionFragment;
    "withdraw(uint256,address,uint256)": FunctionFragment;
    "withdrawFees(address[])": FunctionFragment;
    "withdrawFeesTo(address[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDappAddr"
      | "addOperator"
      | "addTxSender"
      | "applyGov"
      | "changeGov"
      | "charging"
      | "dappID"
      | "dappStakePool"
      | "delWhitelists"
      | "deposit"
      | "disableFeeCurrency"
      | "feeCurrencies"
      | "getAllOperators"
      | "getTxSenders"
      | "gov"
      | "initDappConfig"
      | "isOperator"
      | "operators"
      | "pause"
      | "paused"
      | "pendingGov"
      | "removeTxSender"
      | "resetAdmin"
      | "revokeOperator"
      | "setBlacklists"
      | "setFeeCurrencies"
      | "setSpeFeeConfigByChain"
      | "speChainFees"
      | "unpause"
      | "updateDAppConfig"
      | "updateDappByGov"
      | "withdraw"
      | "withdrawFees"
      | "withdrawFeesTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDappAddr",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTxSender",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "applyGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "charging",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "dappID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dappStakePool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delWhitelists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disableFeeCurrency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCurrencies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTxSenders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initDappConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTxSender",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "resetAdmin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCurrencies",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpeFeeConfigByChain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "speChainFees",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDAppConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDappByGov",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeesTo",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDappAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTxSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "applyGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "charging", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dappID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dappStakePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableFeeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTxSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initDappConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTxSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpeFeeConfigByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "speChainFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDAppConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDappByGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeesTo",
    data: BytesLike
  ): Result;

  events: {
    "AddMpcAddr(uint256,string,string)": EventFragment;
    "ApplyGov(address,address,uint256)": EventFragment;
    "ChangeGov(address,address,uint256)": EventFragment;
    "Charging(uint256,address,uint256,uint256,uint256)": EventFragment;
    "DelMpcAddr(uint256,string,string)": EventFragment;
    "Deposit(uint256,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "SetBlacklists(uint256,bool)": EventFragment;
    "SetDAppAddr(uint256,string[])": EventFragment;
    "SetDAppConfig(uint256,address,address,string,string)": EventFragment;
    "SetFeeConfig(address,string,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddMpcAddr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Charging"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelMpcAddr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBlacklists"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDAppAddr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDAppConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AddMpcAddrEventObject {
  dappID: BigNumber;
  addr: string;
  pubkey: string;
}
export type AddMpcAddrEvent = TypedEvent<
  [BigNumber, string, string],
  AddMpcAddrEventObject
>;

export type AddMpcAddrEventFilter = TypedEventFilter<AddMpcAddrEvent>;

export interface ApplyGovEventObject {
  oldGov: string;
  newGov: string;
  timestamp: BigNumber;
}
export type ApplyGovEvent = TypedEvent<
  [string, string, BigNumber],
  ApplyGovEventObject
>;

export type ApplyGovEventFilter = TypedEventFilter<ApplyGovEvent>;

export interface ChangeGovEventObject {
  oldGov: string;
  newGov: string;
  timestamp: BigNumber;
}
export type ChangeGovEvent = TypedEvent<
  [string, string, BigNumber],
  ChangeGovEventObject
>;

export type ChangeGovEventFilter = TypedEventFilter<ChangeGovEvent>;

export interface ChargingEventObject {
  dappID: BigNumber;
  token: string;
  bill: BigNumber;
  amount: BigNumber;
  left: BigNumber;
}
export type ChargingEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  ChargingEventObject
>;

export type ChargingEventFilter = TypedEventFilter<ChargingEvent>;

export interface DelMpcAddrEventObject {
  dappID: BigNumber;
  addr: string;
  pubkey: string;
}
export type DelMpcAddrEvent = TypedEvent<
  [BigNumber, string, string],
  DelMpcAddrEventObject
>;

export type DelMpcAddrEventFilter = TypedEventFilter<DelMpcAddrEvent>;

export interface DepositEventObject {
  dappID: BigNumber;
  token: string;
  amount: BigNumber;
  left: BigNumber;
}
export type DepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetBlacklistsEventObject {
  dappID: BigNumber;
  flag: boolean;
}
export type SetBlacklistsEvent = TypedEvent<
  [BigNumber, boolean],
  SetBlacklistsEventObject
>;

export type SetBlacklistsEventFilter = TypedEventFilter<SetBlacklistsEvent>;

export interface SetDAppAddrEventObject {
  dappID: BigNumber;
  addresses: string[];
}
export type SetDAppAddrEvent = TypedEvent<
  [BigNumber, string[]],
  SetDAppAddrEventObject
>;

export type SetDAppAddrEventFilter = TypedEventFilter<SetDAppAddrEvent>;

export interface SetDAppConfigEventObject {
  dappID: BigNumber;
  appAdmin: string;
  feeToken: string;
  appDomain: string;
  email: string;
}
export type SetDAppConfigEvent = TypedEvent<
  [BigNumber, string, string, string, string],
  SetDAppConfigEventObject
>;

export type SetDAppConfigEventFilter = TypedEventFilter<SetDAppConfigEvent>;

export interface SetFeeConfigEventObject {
  token: string;
  chain: string;
  callPerByteFee: BigNumber;
}
export type SetFeeConfigEvent = TypedEvent<
  [string, string, BigNumber],
  SetFeeConfigEventObject
>;

export type SetFeeConfigEventFilter = TypedEventFilter<SetFeeConfigEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  dappID: BigNumber;
  token: string;
  amount: BigNumber;
  left: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface C3DappManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: C3DappManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDappAddr(
      _dappID: PromiseOrValue<BigNumberish>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTxSender(
      _dappID: PromiseOrValue<BigNumberish>,
      _addrs: PromiseOrValue<string>[],
      _pubkeys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    charging(
      _dappIDs: PromiseOrValue<BigNumberish>[],
      _tokens: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dappID(overrides?: CallOverrides): Promise<[BigNumber]>;

    dappStakePool(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delWhitelists(
      _dappID: PromiseOrValue<BigNumberish>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _dappID: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableFeeCurrency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllOperators(overrides?: CallOverrides): Promise<[string[]]>;

    getTxSenders(
      _dappID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initDappConfig(
      _feeToken: PromiseOrValue<string>,
      _appDomain: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOperator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingGov(overrides?: CallOverrides): Promise<[string]>;

    removeTxSender(
      _dappID: PromiseOrValue<BigNumberish>,
      _addrs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetAdmin(
      _dappID: PromiseOrValue<BigNumberish>,
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlacklists(
      _dappID: PromiseOrValue<BigNumberish>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCurrencies(
      _tokens: PromiseOrValue<string>[],
      _callfee: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpeFeeConfigByChain(
      _token: PromiseOrValue<string>,
      _chain: PromiseOrValue<string>,
      _callfee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    speChainFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDAppConfig(
      _dappID: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _appID: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDappByGov(
      _dappID: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _dappID: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFeesTo(
      _tokens: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addDappAddr(
    _dappID: PromiseOrValue<BigNumberish>,
    _whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOperator(
    _op: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTxSender(
    _dappID: PromiseOrValue<BigNumberish>,
    _addrs: PromiseOrValue<string>[],
    _pubkeys: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  charging(
    _dappIDs: PromiseOrValue<BigNumberish>[],
    _tokens: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dappID(overrides?: CallOverrides): Promise<BigNumber>;

  dappStakePool(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delWhitelists(
    _dappID: PromiseOrValue<BigNumberish>,
    _whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _dappID: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableFeeCurrency(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeCurrencies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllOperators(overrides?: CallOverrides): Promise<string[]>;

  getTxSenders(
    _dappID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  gov(overrides?: CallOverrides): Promise<string>;

  initDappConfig(
    _feeToken: PromiseOrValue<string>,
    _appDomain: PromiseOrValue<string>,
    _email: PromiseOrValue<string>,
    _whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOperator(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingGov(overrides?: CallOverrides): Promise<string>;

  removeTxSender(
    _dappID: PromiseOrValue<BigNumberish>,
    _addrs: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetAdmin(
    _dappID: PromiseOrValue<BigNumberish>,
    _newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOperator(
    _op: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlacklists(
    _dappID: PromiseOrValue<BigNumberish>,
    _flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCurrencies(
    _tokens: PromiseOrValue<string>[],
    _callfee: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpeFeeConfigByChain(
    _token: PromiseOrValue<string>,
    _chain: PromiseOrValue<string>,
    _callfee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  speChainFees(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDAppConfig(
    _dappID: PromiseOrValue<BigNumberish>,
    _feeToken: PromiseOrValue<string>,
    _appID: PromiseOrValue<string>,
    _email: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDappByGov(
    _dappID: PromiseOrValue<BigNumberish>,
    _feeToken: PromiseOrValue<string>,
    _discount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _dappID: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    _tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFeesTo(
    _tokens: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDappAddr(
      _dappID: PromiseOrValue<BigNumberish>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addOperator(
      _op: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTxSender(
      _dappID: PromiseOrValue<BigNumberish>,
      _addrs: PromiseOrValue<string>[],
      _pubkeys: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    applyGov(overrides?: CallOverrides): Promise<void>;

    changeGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    charging(
      _dappIDs: PromiseOrValue<BigNumberish>[],
      _tokens: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    dappID(overrides?: CallOverrides): Promise<BigNumber>;

    dappStakePool(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delWhitelists(
      _dappID: PromiseOrValue<BigNumberish>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _dappID: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableFeeCurrency(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllOperators(overrides?: CallOverrides): Promise<string[]>;

    getTxSenders(
      _dappID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    gov(overrides?: CallOverrides): Promise<string>;

    initDappConfig(
      _feeToken: PromiseOrValue<string>,
      _appDomain: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isOperator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingGov(overrides?: CallOverrides): Promise<string>;

    removeTxSender(
      _dappID: PromiseOrValue<BigNumberish>,
      _addrs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    resetAdmin(
      _dappID: PromiseOrValue<BigNumberish>,
      _newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperator(
      _op: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlacklists(
      _dappID: PromiseOrValue<BigNumberish>,
      _flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCurrencies(
      _tokens: PromiseOrValue<string>[],
      _callfee: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSpeFeeConfigByChain(
      _token: PromiseOrValue<string>,
      _chain: PromiseOrValue<string>,
      _callfee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    speChainFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateDAppConfig(
      _dappID: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _appID: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDappByGov(
      _dappID: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _dappID: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFeesTo(
      _tokens: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddMpcAddr(uint256,string,string)"(
      dappID?: PromiseOrValue<BigNumberish> | null,
      addr?: null,
      pubkey?: null
    ): AddMpcAddrEventFilter;
    AddMpcAddr(
      dappID?: PromiseOrValue<BigNumberish> | null,
      addr?: null,
      pubkey?: null
    ): AddMpcAddrEventFilter;

    "ApplyGov(address,address,uint256)"(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      timestamp?: null
    ): ApplyGovEventFilter;
    ApplyGov(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      timestamp?: null
    ): ApplyGovEventFilter;

    "ChangeGov(address,address,uint256)"(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      timestamp?: null
    ): ChangeGovEventFilter;
    ChangeGov(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      timestamp?: null
    ): ChangeGovEventFilter;

    "Charging(uint256,address,uint256,uint256,uint256)"(
      dappID?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      bill?: null,
      amount?: null,
      left?: null
    ): ChargingEventFilter;
    Charging(
      dappID?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      bill?: null,
      amount?: null,
      left?: null
    ): ChargingEventFilter;

    "DelMpcAddr(uint256,string,string)"(
      dappID?: PromiseOrValue<BigNumberish> | null,
      addr?: null,
      pubkey?: null
    ): DelMpcAddrEventFilter;
    DelMpcAddr(
      dappID?: PromiseOrValue<BigNumberish> | null,
      addr?: null,
      pubkey?: null
    ): DelMpcAddrEventFilter;

    "Deposit(uint256,address,uint256,uint256)"(
      dappID?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      left?: null
    ): DepositEventFilter;
    Deposit(
      dappID?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      left?: null
    ): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetBlacklists(uint256,bool)"(
      dappID?: null,
      flag?: null
    ): SetBlacklistsEventFilter;
    SetBlacklists(dappID?: null, flag?: null): SetBlacklistsEventFilter;

    "SetDAppAddr(uint256,string[])"(
      dappID?: PromiseOrValue<BigNumberish> | null,
      addresses?: null
    ): SetDAppAddrEventFilter;
    SetDAppAddr(
      dappID?: PromiseOrValue<BigNumberish> | null,
      addresses?: null
    ): SetDAppAddrEventFilter;

    "SetDAppConfig(uint256,address,address,string,string)"(
      dappID?: PromiseOrValue<BigNumberish> | null,
      appAdmin?: PromiseOrValue<string> | null,
      feeToken?: PromiseOrValue<string> | null,
      appDomain?: null,
      email?: null
    ): SetDAppConfigEventFilter;
    SetDAppConfig(
      dappID?: PromiseOrValue<BigNumberish> | null,
      appAdmin?: PromiseOrValue<string> | null,
      feeToken?: PromiseOrValue<string> | null,
      appDomain?: null,
      email?: null
    ): SetDAppConfigEventFilter;

    "SetFeeConfig(address,string,uint256)"(
      token?: PromiseOrValue<string> | null,
      chain?: null,
      callPerByteFee?: null
    ): SetFeeConfigEventFilter;
    SetFeeConfig(
      token?: PromiseOrValue<string> | null,
      chain?: null,
      callPerByteFee?: null
    ): SetFeeConfigEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(uint256,address,uint256,uint256)"(
      dappID?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      left?: null
    ): WithdrawEventFilter;
    Withdraw(
      dappID?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      left?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    addDappAddr(
      _dappID: PromiseOrValue<BigNumberish>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTxSender(
      _dappID: PromiseOrValue<BigNumberish>,
      _addrs: PromiseOrValue<string>[],
      _pubkeys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    charging(
      _dappIDs: PromiseOrValue<BigNumberish>[],
      _tokens: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dappID(overrides?: CallOverrides): Promise<BigNumber>;

    dappStakePool(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delWhitelists(
      _dappID: PromiseOrValue<BigNumberish>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _dappID: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableFeeCurrency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllOperators(overrides?: CallOverrides): Promise<BigNumber>;

    getTxSenders(
      _dappID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initDappConfig(
      _feeToken: PromiseOrValue<string>,
      _appDomain: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOperator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGov(overrides?: CallOverrides): Promise<BigNumber>;

    removeTxSender(
      _dappID: PromiseOrValue<BigNumberish>,
      _addrs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetAdmin(
      _dappID: PromiseOrValue<BigNumberish>,
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlacklists(
      _dappID: PromiseOrValue<BigNumberish>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCurrencies(
      _tokens: PromiseOrValue<string>[],
      _callfee: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpeFeeConfigByChain(
      _token: PromiseOrValue<string>,
      _chain: PromiseOrValue<string>,
      _callfee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    speChainFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDAppConfig(
      _dappID: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _appID: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDappByGov(
      _dappID: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _dappID: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFeesTo(
      _tokens: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDappAddr(
      _dappID: PromiseOrValue<BigNumberish>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTxSender(
      _dappID: PromiseOrValue<BigNumberish>,
      _addrs: PromiseOrValue<string>[],
      _pubkeys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    charging(
      _dappIDs: PromiseOrValue<BigNumberish>[],
      _tokens: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dappID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dappStakePool(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delWhitelists(
      _dappID: PromiseOrValue<BigNumberish>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _dappID: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableFeeCurrency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTxSenders(
      _dappID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initDappConfig(
      _feeToken: PromiseOrValue<string>,
      _appDomain: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOperator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTxSender(
      _dappID: PromiseOrValue<BigNumberish>,
      _addrs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetAdmin(
      _dappID: PromiseOrValue<BigNumberish>,
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlacklists(
      _dappID: PromiseOrValue<BigNumberish>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCurrencies(
      _tokens: PromiseOrValue<string>[],
      _callfee: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpeFeeConfigByChain(
      _token: PromiseOrValue<string>,
      _chain: PromiseOrValue<string>,
      _callfee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    speChainFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDAppConfig(
      _dappID: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _appID: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDappByGov(
      _dappID: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _dappID: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeesTo(
      _tokens: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
