/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace C3CallerStructLib {
  export type C3EvmMessageStruct = {
    uuid: PromiseOrValue<BytesLike>;
    to: PromiseOrValue<string>;
    fromChainID: PromiseOrValue<string>;
    sourceTx: PromiseOrValue<string>;
    fallbackTo: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type C3EvmMessageStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    uuid: string;
    to: string;
    fromChainID: string;
    sourceTx: string;
    fallbackTo: string;
    data: string;
  };
}

export interface IC3CallerInterface extends utils.Interface {
  functions: {
    "c3Fallback(uint256,address,(bytes32,address,string,string,string,bytes))": FunctionFragment;
    "c3broadcast(uint256,address,string[],string[],bytes)": FunctionFragment;
    "c3call(uint256,address,string,string,bytes,bytes)": FunctionFragment;
    "context()": FunctionFragment;
    "execute(uint256,address,(bytes32,address,string,string,string,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "c3Fallback"
      | "c3broadcast"
      | "c3call"
      | "context"
      | "execute"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "c3Fallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      C3CallerStructLib.C3EvmMessageStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "c3broadcast",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "c3call",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "context", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      C3CallerStructLib.C3EvmMessageStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "c3Fallback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "c3broadcast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "c3call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "context", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;

  events: {};
}

export interface IC3Caller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IC3CallerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    c3Fallback(
      dappID: PromiseOrValue<BigNumberish>,
      _txSender: PromiseOrValue<string>,
      message: C3CallerStructLib.C3EvmMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    c3broadcast(
      _dappID: PromiseOrValue<BigNumberish>,
      _caller: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    c3call(
      _dappID: PromiseOrValue<BigNumberish>,
      _caller: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _extra: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    context(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        uuid: string;
        fromChainID: string;
        sourceTx: string;
      }
    >;

    execute(
      _dappID: PromiseOrValue<BigNumberish>,
      _txSender: PromiseOrValue<string>,
      message: C3CallerStructLib.C3EvmMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  c3Fallback(
    dappID: PromiseOrValue<BigNumberish>,
    _txSender: PromiseOrValue<string>,
    message: C3CallerStructLib.C3EvmMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  c3broadcast(
    _dappID: PromiseOrValue<BigNumberish>,
    _caller: PromiseOrValue<string>,
    _to: PromiseOrValue<string>[],
    _toChainIDs: PromiseOrValue<string>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  c3call(
    _dappID: PromiseOrValue<BigNumberish>,
    _caller: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _toChainID: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _extra: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  context(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      uuid: string;
      fromChainID: string;
      sourceTx: string;
    }
  >;

  execute(
    _dappID: PromiseOrValue<BigNumberish>,
    _txSender: PromiseOrValue<string>,
    message: C3CallerStructLib.C3EvmMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    c3Fallback(
      dappID: PromiseOrValue<BigNumberish>,
      _txSender: PromiseOrValue<string>,
      message: C3CallerStructLib.C3EvmMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    c3broadcast(
      _dappID: PromiseOrValue<BigNumberish>,
      _caller: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    c3call(
      _dappID: PromiseOrValue<BigNumberish>,
      _caller: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _extra: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    context(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        uuid: string;
        fromChainID: string;
        sourceTx: string;
      }
    >;

    execute(
      _dappID: PromiseOrValue<BigNumberish>,
      _txSender: PromiseOrValue<string>,
      message: C3CallerStructLib.C3EvmMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    c3Fallback(
      dappID: PromiseOrValue<BigNumberish>,
      _txSender: PromiseOrValue<string>,
      message: C3CallerStructLib.C3EvmMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    c3broadcast(
      _dappID: PromiseOrValue<BigNumberish>,
      _caller: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    c3call(
      _dappID: PromiseOrValue<BigNumberish>,
      _caller: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _extra: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    context(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _dappID: PromiseOrValue<BigNumberish>,
      _txSender: PromiseOrValue<string>,
      message: C3CallerStructLib.C3EvmMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    c3Fallback(
      dappID: PromiseOrValue<BigNumberish>,
      _txSender: PromiseOrValue<string>,
      message: C3CallerStructLib.C3EvmMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    c3broadcast(
      _dappID: PromiseOrValue<BigNumberish>,
      _caller: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    c3call(
      _dappID: PromiseOrValue<BigNumberish>,
      _caller: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _extra: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    context(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _dappID: PromiseOrValue<BigNumberish>,
      _txSender: PromiseOrValue<string>,
      message: C3CallerStructLib.C3EvmMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
