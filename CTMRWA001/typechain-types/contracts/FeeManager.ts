/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace FeeManager {
  export type FeeParamsStruct = {
    basePrice: PromiseOrValue<BigNumberish>;
    lowGas: PromiseOrValue<BigNumberish>;
    normalGas: PromiseOrValue<BigNumberish>;
    highGas: PromiseOrValue<BigNumberish>;
    veryHighGas: PromiseOrValue<BigNumberish>;
    lowGasFee: PromiseOrValue<BigNumberish>;
    normalGasFee: PromiseOrValue<BigNumberish>;
    highGasFee: PromiseOrValue<BigNumberish>;
    veryHighGasFee: PromiseOrValue<BigNumberish>;
  };

  export type FeeParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    basePrice: BigNumber;
    lowGas: BigNumber;
    normalGas: BigNumber;
    highGas: BigNumber;
    veryHighGas: BigNumber;
    lowGasFee: BigNumber;
    normalGasFee: BigNumber;
    highGasFee: BigNumber;
    veryHighGasFee: BigNumber;
  };
}

export interface FeeManagerInterface extends utils.Interface {
  functions: {
    "FROM_CHAIN_PAY()": FunctionFragment;
    "TO_CHAIN_PAY()": FunctionFragment;
    "addFeeToken(address)": FunctionFragment;
    "addTxSender(address)": FunctionFragment;
    "c3CallerProxy()": FunctionFragment;
    "c3Fallback(uint256,bytes,bytes)": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "dappID()": FunctionFragment;
    "delFeeToken(address)": FunctionFragment;
    "delay()": FunctionFragment;
    "disableTxSender(address)": FunctionFragment;
    "doGov(string,string,bytes)": FunctionFragment;
    "doGovBroadcast(string[],string[],bytes)": FunctionFragment;
    "feeParams(address)": FunctionFragment;
    "feeTokenIndexMap(address)": FunctionFragment;
    "feeTokenList(uint256)": FunctionFragment;
    "getFeeTokenIndexMap(address)": FunctionFragment;
    "getFeeTokenList()": FunctionFragment;
    "getFeeTokenParams(address)": FunctionFragment;
    "getFromChainFee(uint256,address)": FunctionFragment;
    "getGasFee(uint256,address)": FunctionFragment;
    "getToChainFee(uint256,address)": FunctionFragment;
    "getXChainFee(uint256,uint256,address)": FunctionFragment;
    "gov()": FunctionFragment;
    "isValidSender(address)": FunctionFragment;
    "payFee(uint256,address)": FunctionFragment;
    "setDelay(uint256)": FunctionFragment;
    "setFeeConfig(uint256,uint256,uint256,address[],uint256[])": FunctionFragment;
    "setFeeTokenParams(address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "withdrawFee(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FROM_CHAIN_PAY"
      | "TO_CHAIN_PAY"
      | "addFeeToken"
      | "addTxSender"
      | "c3CallerProxy"
      | "c3Fallback"
      | "changeGov"
      | "dappID"
      | "delFeeToken"
      | "delay"
      | "disableTxSender"
      | "doGov"
      | "doGovBroadcast"
      | "feeParams"
      | "feeTokenIndexMap"
      | "feeTokenList"
      | "getFeeTokenIndexMap"
      | "getFeeTokenList"
      | "getFeeTokenParams"
      | "getFromChainFee"
      | "getGasFee"
      | "getToChainFee"
      | "getXChainFee"
      | "gov"
      | "isValidSender"
      | "payFee"
      | "setDelay"
      | "setFeeConfig"
      | "setFeeTokenParams"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FROM_CHAIN_PAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TO_CHAIN_PAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFeeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTxSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "c3CallerProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "c3Fallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "dappID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delFeeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableTxSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "doGov",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "doGovBroadcast",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTokenIndexMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTokenList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTokenIndexMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTokenParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFromChainFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getToChainFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getXChainFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "payFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTokenParams",
    values: [PromiseOrValue<string>, FeeManager.FeeParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FROM_CHAIN_PAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TO_CHAIN_PAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTxSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "c3CallerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "c3Fallback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dappID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableTxSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doGovBroadcast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTokenIndexMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeTokenIndexMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeTokenParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFromChainFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGasFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getToChainFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXChainFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTokenParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "AddFeeToken(address)": EventFragment;
    "DelFeeToken(address)": EventFragment;
    "LogChangeGov(address,address,uint256,uint256)": EventFragment;
    "LogTxSender(address,bool)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddFeeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelFeeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogChangeGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTxSender"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface AddFeeTokenEventObject {
  _feeToken: string;
}
export type AddFeeTokenEvent = TypedEvent<[string], AddFeeTokenEventObject>;

export type AddFeeTokenEventFilter = TypedEventFilter<AddFeeTokenEvent>;

export interface DelFeeTokenEventObject {
  _feeToken: string;
}
export type DelFeeTokenEvent = TypedEvent<[string], DelFeeTokenEventObject>;

export type DelFeeTokenEventFilter = TypedEventFilter<DelFeeTokenEvent>;

export interface LogChangeGovEventObject {
  oldGov: string;
  newGov: string;
  effectiveTime: BigNumber;
  chainID: BigNumber;
}
export type LogChangeGovEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogChangeGovEventObject
>;

export type LogChangeGovEventFilter = TypedEventFilter<LogChangeGovEvent>;

export interface LogTxSenderEventObject {
  txSender: string;
  vaild: boolean;
}
export type LogTxSenderEvent = TypedEvent<
  [string, boolean],
  LogTxSenderEventObject
>;

export type LogTxSenderEventFilter = TypedEventFilter<LogTxSenderEvent>;

export interface WithdrawalEventObject {
  _oldFeeToken: string;
  _recipient: string;
  _oldTokenContractBalance: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface FeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FROM_CHAIN_PAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    TO_CHAIN_PAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    addFeeToken(
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    c3CallerProxy(overrides?: CallOverrides): Promise<[string]>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dappID(overrides?: CallOverrides): Promise<[BigNumber]>;

    delFeeToken(
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeParams(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        basePrice: BigNumber;
        lowGas: BigNumber;
        normalGas: BigNumber;
        highGas: BigNumber;
        veryHighGas: BigNumber;
        lowGasFee: BigNumber;
        normalGasFee: BigNumber;
        highGasFee: BigNumber;
        veryHighGasFee: BigNumber;
      }
    >;

    feeTokenIndexMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeTokenList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFeeTokenIndexMap(
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeTokenList(overrides?: CallOverrides): Promise<[string[]]>;

    getFeeTokenParams(
      _feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[FeeManager.FeeParamsStructOutput]>;

    getFromChainFee(
      fromChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGasFee(
      toChainId: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getToChainFee(
      toChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getXChainFee(
      fromChainID: PromiseOrValue<BigNumberish>,
      toChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    payFee(
      fee: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeConfig(
      srcChainID: PromiseOrValue<BigNumberish>,
      dstChainID: PromiseOrValue<BigNumberish>,
      payFrom: PromiseOrValue<BigNumberish>,
      feetokens: PromiseOrValue<string>[],
      fee: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeTokenParams(
      _feeToken: PromiseOrValue<string>,
      fee: FeeManager.FeeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      feeToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FROM_CHAIN_PAY(overrides?: CallOverrides): Promise<BigNumber>;

  TO_CHAIN_PAY(overrides?: CallOverrides): Promise<BigNumber>;

  addFeeToken(
    _feeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTxSender(
    txSender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  c3CallerProxy(overrides?: CallOverrides): Promise<string>;

  c3Fallback(
    _dappID: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _reason: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGov(
    newGov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dappID(overrides?: CallOverrides): Promise<BigNumber>;

  delFeeToken(
    _feeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  disableTxSender(
    txSender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doGov(
    _to: PromiseOrValue<string>,
    _toChainID: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doGovBroadcast(
    _targets: PromiseOrValue<string>[],
    _toChainIDs: PromiseOrValue<string>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeParams(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      basePrice: BigNumber;
      lowGas: BigNumber;
      normalGas: BigNumber;
      highGas: BigNumber;
      veryHighGas: BigNumber;
      lowGasFee: BigNumber;
      normalGasFee: BigNumber;
      highGasFee: BigNumber;
      veryHighGasFee: BigNumber;
    }
  >;

  feeTokenIndexMap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeTokenList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeeTokenIndexMap(
    feeToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeTokenList(overrides?: CallOverrides): Promise<string[]>;

  getFeeTokenParams(
    _feeToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FeeManager.FeeParamsStructOutput>;

  getFromChainFee(
    fromChainID: PromiseOrValue<BigNumberish>,
    feeToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasFee(
    toChainId: PromiseOrValue<BigNumberish>,
    feeToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getToChainFee(
    toChainID: PromiseOrValue<BigNumberish>,
    feeToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getXChainFee(
    fromChainID: PromiseOrValue<BigNumberish>,
    toChainID: PromiseOrValue<BigNumberish>,
    feeToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  isValidSender(
    txSender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  payFee(
    fee: PromiseOrValue<BigNumberish>,
    feeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelay(
    _delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeConfig(
    srcChainID: PromiseOrValue<BigNumberish>,
    dstChainID: PromiseOrValue<BigNumberish>,
    payFrom: PromiseOrValue<BigNumberish>,
    feetokens: PromiseOrValue<string>[],
    fee: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeTokenParams(
    _feeToken: PromiseOrValue<string>,
    fee: FeeManager.FeeParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    feeToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FROM_CHAIN_PAY(overrides?: CallOverrides): Promise<BigNumber>;

    TO_CHAIN_PAY(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeToken(
      _feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    c3CallerProxy(overrides?: CallOverrides): Promise<string>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dappID(overrides?: CallOverrides): Promise<BigNumber>;

    delFeeToken(
      _feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeParams(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        basePrice: BigNumber;
        lowGas: BigNumber;
        normalGas: BigNumber;
        highGas: BigNumber;
        veryHighGas: BigNumber;
        lowGasFee: BigNumber;
        normalGasFee: BigNumber;
        highGasFee: BigNumber;
        veryHighGasFee: BigNumber;
      }
    >;

    feeTokenIndexMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeTokenList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeTokenIndexMap(
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTokenList(overrides?: CallOverrides): Promise<string[]>;

    getFeeTokenParams(
      _feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FeeManager.FeeParamsStructOutput>;

    getFromChainFee(
      fromChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasFee(
      toChainId: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToChainFee(
      toChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getXChainFee(
      fromChainID: PromiseOrValue<BigNumberish>,
      toChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payFee(
      fee: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeConfig(
      srcChainID: PromiseOrValue<BigNumberish>,
      dstChainID: PromiseOrValue<BigNumberish>,
      payFrom: PromiseOrValue<BigNumberish>,
      feetokens: PromiseOrValue<string>[],
      fee: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeeTokenParams(
      _feeToken: PromiseOrValue<string>,
      fee: FeeManager.FeeParamsStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFee(
      feeToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddFeeToken(address)"(
      _feeToken?: PromiseOrValue<string> | null
    ): AddFeeTokenEventFilter;
    AddFeeToken(
      _feeToken?: PromiseOrValue<string> | null
    ): AddFeeTokenEventFilter;

    "DelFeeToken(address)"(
      _feeToken?: PromiseOrValue<string> | null
    ): DelFeeTokenEventFilter;
    DelFeeToken(
      _feeToken?: PromiseOrValue<string> | null
    ): DelFeeTokenEventFilter;

    "LogChangeGov(address,address,uint256,uint256)"(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      effectiveTime?: PromiseOrValue<BigNumberish> | null,
      chainID?: null
    ): LogChangeGovEventFilter;
    LogChangeGov(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      effectiveTime?: PromiseOrValue<BigNumberish> | null,
      chainID?: null
    ): LogChangeGovEventFilter;

    "LogTxSender(address,bool)"(
      txSender?: PromiseOrValue<string> | null,
      vaild?: null
    ): LogTxSenderEventFilter;
    LogTxSender(
      txSender?: PromiseOrValue<string> | null,
      vaild?: null
    ): LogTxSenderEventFilter;

    "Withdrawal(address,address,uint256)"(
      _oldFeeToken?: null,
      _recipient?: null,
      _oldTokenContractBalance?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      _oldFeeToken?: null,
      _recipient?: null,
      _oldTokenContractBalance?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    FROM_CHAIN_PAY(overrides?: CallOverrides): Promise<BigNumber>;

    TO_CHAIN_PAY(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeToken(
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    c3CallerProxy(overrides?: CallOverrides): Promise<BigNumber>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dappID(overrides?: CallOverrides): Promise<BigNumber>;

    delFeeToken(
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeParams(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeTokenIndexMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeTokenList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTokenIndexMap(
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTokenList(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeTokenParams(
      _feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFromChainFee(
      fromChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasFee(
      toChainId: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToChainFee(
      toChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getXChainFee(
      fromChainID: PromiseOrValue<BigNumberish>,
      toChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payFee(
      fee: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeConfig(
      srcChainID: PromiseOrValue<BigNumberish>,
      dstChainID: PromiseOrValue<BigNumberish>,
      payFrom: PromiseOrValue<BigNumberish>,
      feetokens: PromiseOrValue<string>[],
      fee: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeTokenParams(
      _feeToken: PromiseOrValue<string>,
      fee: FeeManager.FeeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      feeToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FROM_CHAIN_PAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TO_CHAIN_PAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addFeeToken(
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    c3CallerProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dappID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delFeeToken(
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeParams(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeTokenIndexMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeTokenList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeTokenIndexMap(
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeTokenList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeTokenParams(
      _feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFromChainFee(
      fromChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasFee(
      toChainId: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToChainFee(
      toChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getXChainFee(
      fromChainID: PromiseOrValue<BigNumberish>,
      toChainID: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payFee(
      fee: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeConfig(
      srcChainID: PromiseOrValue<BigNumberish>,
      dstChainID: PromiseOrValue<BigNumberish>,
      payFrom: PromiseOrValue<BigNumberish>,
      feetokens: PromiseOrValue<string>[],
      fee: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTokenParams(
      _feeToken: PromiseOrValue<string>,
      fee: FeeManager.FeeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      feeToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
