/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface GovernDappInterface extends utils.Interface {
  functions: {
    "addTxSender(address)": FunctionFragment;
    "c3CallerProxy()": FunctionFragment;
    "c3Fallback(uint256,bytes,bytes)": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "dappID()": FunctionFragment;
    "delay()": FunctionFragment;
    "disableTxSender(address)": FunctionFragment;
    "doGov(string,string,bytes)": FunctionFragment;
    "doGovBroadcast(string[],string[],bytes)": FunctionFragment;
    "gov()": FunctionFragment;
    "isValidSender(address)": FunctionFragment;
    "setDelay(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTxSender"
      | "c3CallerProxy"
      | "c3Fallback"
      | "changeGov"
      | "dappID"
      | "delay"
      | "disableTxSender"
      | "doGov"
      | "doGovBroadcast"
      | "gov"
      | "isValidSender"
      | "setDelay"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTxSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "c3CallerProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "c3Fallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "dappID", values?: undefined): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableTxSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "doGov",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "doGovBroadcast",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTxSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "c3CallerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "c3Fallback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dappID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableTxSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doGovBroadcast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;

  events: {
    "LogChangeGov(address,address,uint256,uint256)": EventFragment;
    "LogTxSender(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogChangeGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTxSender"): EventFragment;
}

export interface LogChangeGovEventObject {
  oldGov: string;
  newGov: string;
  effectiveTime: BigNumber;
  chainID: BigNumber;
}
export type LogChangeGovEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogChangeGovEventObject
>;

export type LogChangeGovEventFilter = TypedEventFilter<LogChangeGovEvent>;

export interface LogTxSenderEventObject {
  txSender: string;
  vaild: boolean;
}
export type LogTxSenderEvent = TypedEvent<
  [string, boolean],
  LogTxSenderEventObject
>;

export type LogTxSenderEventFilter = TypedEventFilter<LogTxSenderEvent>;

export interface GovernDapp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernDappInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    c3CallerProxy(overrides?: CallOverrides): Promise<[string]>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dappID(overrides?: CallOverrides): Promise<[BigNumber]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addTxSender(
    txSender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  c3CallerProxy(overrides?: CallOverrides): Promise<string>;

  c3Fallback(
    _dappID: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _reason: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGov(
    newGov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dappID(overrides?: CallOverrides): Promise<BigNumber>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  disableTxSender(
    txSender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doGov(
    _to: PromiseOrValue<string>,
    _toChainID: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doGovBroadcast(
    _targets: PromiseOrValue<string>[],
    _toChainIDs: PromiseOrValue<string>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gov(overrides?: CallOverrides): Promise<string>;

  isValidSender(
    txSender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setDelay(
    _delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    c3CallerProxy(overrides?: CallOverrides): Promise<string>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dappID(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    gov(overrides?: CallOverrides): Promise<string>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogChangeGov(address,address,uint256,uint256)"(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      effectiveTime?: PromiseOrValue<BigNumberish> | null,
      chainID?: null
    ): LogChangeGovEventFilter;
    LogChangeGov(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      effectiveTime?: PromiseOrValue<BigNumberish> | null,
      chainID?: null
    ): LogChangeGovEventFilter;

    "LogTxSender(address,bool)"(
      txSender?: PromiseOrValue<string> | null,
      vaild?: null
    ): LogTxSenderEventFilter;
    LogTxSender(
      txSender?: PromiseOrValue<string> | null,
      vaild?: null
    ): LogTxSenderEventFilter;
  };

  estimateGas: {
    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    c3CallerProxy(overrides?: CallOverrides): Promise<BigNumber>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dappID(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    c3CallerProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    c3Fallback(
      _dappID: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGov(
      newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dappID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableTxSender(
      txSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doGov(
      _to: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doGovBroadcast(
      _targets: PromiseOrValue<string>[],
      _toChainIDs: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidSender(
      txSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
