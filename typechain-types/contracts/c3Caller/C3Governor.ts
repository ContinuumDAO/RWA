/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface C3GovernorInterface extends utils.Interface {
  functions: {
    "addOperator(address)": FunctionFragment;
    "applyGov()": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "doGov(bytes32,uint256)": FunctionFragment;
    "getAllOperators()": FunctionFragment;
    "getProposalData(bytes32,uint256)": FunctionFragment;
    "gov()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "operators(uint256)": FunctionFragment;
    "pendingGov()": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "sendMultiParams(bytes[],bytes32)": FunctionFragment;
    "sendParams(bytes,bytes32)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOperator"
      | "applyGov"
      | "changeGov"
      | "doGov"
      | "getAllOperators"
      | "getProposalData"
      | "gov"
      | "isOperator"
      | "operators"
      | "pendingGov"
      | "revokeOperator"
      | "sendMultiParams"
      | "sendParams"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "applyGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "doGov",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalData",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMultiParams",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendParams",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "applyGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMultiParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ApplyGov(address,address,uint256)": EventFragment;
    "C3GovernorLog(bytes32,uint256,string,bytes)": EventFragment;
    "ChangeGov(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewProposal(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApplyGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "C3GovernorLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProposal"): EventFragment;
}

export interface ApplyGovEventObject {
  oldGov: string;
  newGov: string;
  timestamp: BigNumber;
}
export type ApplyGovEvent = TypedEvent<
  [string, string, BigNumber],
  ApplyGovEventObject
>;

export type ApplyGovEventFilter = TypedEventFilter<ApplyGovEvent>;

export interface C3GovernorLogEventObject {
  nonce: string;
  toChainID: BigNumber;
  to: string;
  toData: string;
}
export type C3GovernorLogEvent = TypedEvent<
  [string, BigNumber, string, string],
  C3GovernorLogEventObject
>;

export type C3GovernorLogEventFilter = TypedEventFilter<C3GovernorLogEvent>;

export interface ChangeGovEventObject {
  oldGov: string;
  newGov: string;
  timestamp: BigNumber;
}
export type ChangeGovEvent = TypedEvent<
  [string, string, BigNumber],
  ChangeGovEventObject
>;

export type ChangeGovEventFilter = TypedEventFilter<ChangeGovEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewProposalEventObject {
  uuid: string;
}
export type NewProposalEvent = TypedEvent<[string], NewProposalEventObject>;

export type NewProposalEventFilter = TypedEventFilter<NewProposalEvent>;

export interface C3Governor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: C3GovernorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doGov(
      _nonce: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllOperators(overrides?: CallOverrides): Promise<[string[]]>;

    getProposalData(
      _nonce: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isOperator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingGov(overrides?: CallOverrides): Promise<[string]>;

    revokeOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMultiParams(
      _data: PromiseOrValue<BytesLike>[],
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendParams(
      _data: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addOperator(
    _op: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doGov(
    _nonce: PromiseOrValue<BytesLike>,
    offset: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllOperators(overrides?: CallOverrides): Promise<string[]>;

  getProposalData(
    _nonce: PromiseOrValue<BytesLike>,
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  gov(overrides?: CallOverrides): Promise<string>;

  isOperator(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingGov(overrides?: CallOverrides): Promise<string>;

  revokeOperator(
    _op: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMultiParams(
    _data: PromiseOrValue<BytesLike>[],
    _nonce: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendParams(
    _data: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addOperator(
      _op: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    applyGov(overrides?: CallOverrides): Promise<void>;

    changeGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    doGov(
      _nonce: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllOperators(overrides?: CallOverrides): Promise<string[]>;

    getProposalData(
      _nonce: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    gov(overrides?: CallOverrides): Promise<string>;

    isOperator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingGov(overrides?: CallOverrides): Promise<string>;

    revokeOperator(
      _op: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMultiParams(
      _data: PromiseOrValue<BytesLike>[],
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendParams(
      _data: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ApplyGov(address,address,uint256)"(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      timestamp?: null
    ): ApplyGovEventFilter;
    ApplyGov(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      timestamp?: null
    ): ApplyGovEventFilter;

    "C3GovernorLog(bytes32,uint256,string,bytes)"(
      nonce?: PromiseOrValue<BytesLike> | null,
      toChainID?: PromiseOrValue<BigNumberish> | null,
      to?: null,
      toData?: null
    ): C3GovernorLogEventFilter;
    C3GovernorLog(
      nonce?: PromiseOrValue<BytesLike> | null,
      toChainID?: PromiseOrValue<BigNumberish> | null,
      to?: null,
      toData?: null
    ): C3GovernorLogEventFilter;

    "ChangeGov(address,address,uint256)"(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      timestamp?: null
    ): ChangeGovEventFilter;
    ChangeGov(
      oldGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null,
      timestamp?: null
    ): ChangeGovEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewProposal(bytes32)"(
      uuid?: PromiseOrValue<BytesLike> | null
    ): NewProposalEventFilter;
    NewProposal(
      uuid?: PromiseOrValue<BytesLike> | null
    ): NewProposalEventFilter;
  };

  estimateGas: {
    addOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doGov(
      _nonce: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllOperators(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalData(
      _nonce: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGov(overrides?: CallOverrides): Promise<BigNumber>;

    revokeOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMultiParams(
      _data: PromiseOrValue<BytesLike>[],
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendParams(
      _data: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doGov(
      _nonce: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalData(
      _nonce: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeOperator(
      _op: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMultiParams(
      _data: PromiseOrValue<BytesLike>[],
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendParams(
      _data: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
