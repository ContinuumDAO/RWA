/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IC3Caller,
  IC3CallerInterface,
} from "../../../../contracts/c3Caller/IC3Caller.sol/IC3Caller";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dappID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_txSender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "uuid",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "string",
            name: "fromChainID",
            type: "string",
          },
          {
            internalType: "string",
            name: "sourceTx",
            type: "string",
          },
          {
            internalType: "string",
            name: "fallbackTo",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct C3CallerStructLib.C3EvmMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "c3Fallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dappID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
      {
        internalType: "string[]",
        name: "_to",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "_toChainIDs",
        type: "string[]",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "c3broadcast",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dappID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
      {
        internalType: "string",
        name: "_to",
        type: "string",
      },
      {
        internalType: "string",
        name: "_toChainID",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_extra",
        type: "bytes",
      },
    ],
    name: "c3call",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "context",
    outputs: [
      {
        internalType: "bytes32",
        name: "uuid",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "fromChainID",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceTx",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dappID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_txSender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "uuid",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "string",
            name: "fromChainID",
            type: "string",
          },
          {
            internalType: "string",
            name: "sourceTx",
            type: "string",
          },
          {
            internalType: "string",
            name: "fallbackTo",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct C3CallerStructLib.C3EvmMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IC3Caller__factory {
  static readonly abi = _abi;
  static createInterface(): IC3CallerInterface {
    return new utils.Interface(_abi) as IC3CallerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IC3Caller {
    return new Contract(address, _abi, signerOrProvider) as IC3Caller;
  }
}
